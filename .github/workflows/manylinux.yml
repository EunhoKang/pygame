name: ManyLinux

# Run CI only when a release is created, on changes to main branch, or any PR 
# to main. Do not run CI on any other branch. Also, skip any non-source changes 
# from running on CI
on:
  release:
    types: [created]
  push:
    branches: main
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '.gitignore'
      - '*.rst'
      - '*.md'
      - '.github/workflows/*.yml'
      # re-include current file to not be excluded
      - '!.github/workflows/manylinux.yml'

  pull_request:
    branches: main
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '.gitignore'
      - '*.rst'
      - '*.md'
      - '.github/workflows/*.yml'
      # re-include current file to not be excluded
      - '!.github/workflows/manylinux.yml'

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false  # if a particular matrix build fails, don't skip the rest
      matrix:
        # Split job into many matrix builds, because GH actions provides 20
        # concurrent builds on ubuntu
        include:
          # no pypy on manylinux1
          - { image: manylinux1, arch: x86_64, pyversions: cp* }
          - { image: manylinux1, arch: i686, pyversions: cp* }
          - { image: manylinux2010, arch: x86_64, pyversions: cp* pp* }
          - { image: manylinux2010, arch: i686, pyversions: cp* pp* }
          - { image: manylinux2014, arch: x86_64, pyversions: cp* pp* }
          - { image: manylinux2014, arch: i686, pyversions: cp* pp* }
          # separate aarch64 cpython and pypy builds because each takes a lot
          # of time
          - { image: manylinux2014, arch: aarch64, pyversions: cp* }
          - { image: manylinux2014, arch: aarch64, pyversions: pp* }

    env:
      # environment variables needed for testing
      SDL_VIDEODRIVER: "dummy"
      SDL_AUDIODRIVER: "disk"
      PORTMIDI_INC_PORTTIME: 1

      CIBW_BUILD: ${{ matrix.pyversions }}
      CIBW_ARCHS: ${{ matrix.arch }}

      # skip musllinux for now
      CIBW_SKIP: '*-musllinux_*'

      # load pip config from this file. Define this in 'CIBW_ENVIRONMENT'
      # because this should not affect cibuildwheel machinery
      CIBW_ENVIRONMENT: PIP_CONFIG_FILE=buildconfig/pip_config.ini

      # these environment variables will be passed to the docker container
      CIBW_ENVIRONMENT_PASS_LINUX: |
        SDL_VIDEODRIVER SDL_AUDIODRIVER PORTMIDI_INC_PORTTIME PIP_CONFIG_FILE

      # set custom pygame images
      CIBW_MANYLINUX_X86_64_IMAGE: pygame/${{ matrix.image }}_base_x86_64
      CIBW_MANYLINUX_I686_IMAGE: pygame/${{ matrix.image }}_base_i686
      CIBW_MANYLINUX_AARCH64_IMAGE: pygame/${{ matrix.image }}_base_aarch64
      CIBW_MANYLINUX_PYPY_X86_64_IMAGE: pygame/${{ matrix.image }}_base_x86_64
      CIBW_MANYLINUX_PYPY_I686_IMAGE: pygame/${{ matrix.image }}_base_i686
      CIBW_MANYLINUX_PYPY_AARCH64_IMAGE: pygame/${{ matrix.image }}_base_aarch64

      # command that runs before every build
      CIBW_BEFORE_BUILD: |
        pip install Sphinx
        python setup.py docs

      CIBW_TEST_COMMAND: python -m pygame.tests -v --exclude opengl,music,timing --time_out 300

      # Increase pip debugging output
      CIBW_BUILD_VERBOSITY: 2

    steps:
    - uses: actions/checkout@v2.3.4

    # setup QEMU only on aarch64 matrix
    - name: Set up QEMU
      if: ${{ matrix.arch == 'aarch64' }}
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64

    - name: Build and test wheels
      uses: pypa/cibuildwheel@v2.4.0

    # We upload the generated files under github actions assets
    - name: Upload dist
      uses: actions/upload-artifact@v2
      with:
        name: pygame-manylinux-wheels
        path: ./wheelhouse/*.whl

#   - name: Upload binaries to Github Releases
#     if: github.event_name == 'release'
#     uses: svenstaro/upload-release-action@v2
#     with:
#       repo_token: ${{ secrets.GITHUB_TOKEN }}
#       file: ./wheelhouse/*.whl
#       tag: ${{ github.ref }}
#
#   - name: Upload binaries to PyPI
#     if: github.event_name == 'release'
#     env:
#      TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#      TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#     run: |
#       python3 -m pip install twine
#       twine upload ./wheelhouse/*.whl
